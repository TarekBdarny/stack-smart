generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
model User {
  id                        String         @id @default(cuid())
  email                     String         @unique
  name                      String
  avatar                    String?
  phoneNumber               String?        @unique
  location                  String?
  role                      UserRole       @default(CUSTOMER)
  clerkId                   String         @unique
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  storeId                   String?
  
  // Relations
  Order                     Order[]
  ownedStores               Store[]        @relation("StoreOwner")
  assignedStore             Store?         @relation("StoreStaff", fields: [storeId], references: [id], onDelete: Cascade)
  storeRequests             StoreRequest[] @relation("UserRequests")
  reviewedRequests          StoreRequest[] @relation("RequestReviewer")
  
  // New subscription relation - this was missing the proper relation definition
  subscriptions             Subscription[] @relation("UserSubscriptions")
  
  @@index([email])
  @@index([clerkId])
}


model Store {
  id                       String         @id @default(cuid())
  ownerId                  String
  name                     String         @unique
  location                 String
  workHours                String
  isOpen                   Boolean        @default(true)
  profit                   Float          @default(0)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  
  // Relations
  Product                  Product[]
  owner                    User           @relation("StoreOwner", fields: [ownerId], references: [id], onDelete: Restrict)
  staff                    User[]         @relation("StoreStaff")
  StoreHistory             StoreHistory[]
  
  @@index([ownerId])
  @@index([isOpen])
}


model StoreRequest {
  id           String        @id @default(cuid())

  requesterId  String
  requester    User          @relation("UserRequests", fields: [requesterId], references: [id])

  responseById String?
  responseBy   User?         @relation("RequestReviewer", fields: [responseById], references: [id])
  description String?
  name         String
  location     String
  workHours    String
  status       RequestStatus @default(PENDING)

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}


model Plan {
  id                    String   @id @default(cuid())
  name                  String   @unique 
  type                  PlanType @unique 
  price                 Float    // Monthly price
  maxStores             Int      // Maximum stores allowed
  maxProductsPerStore   Int     // Optional: limit products per store
  maxStaffPerStore      Int    // Optional: limit staff per store
  features              Json?    // JSON field for additional features
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  subscriptions         Subscription[]
}
model Subscription {
  id                    String     @id @default(cuid())
  userId                String
  planId                String
  status                PlanStatus @default(ACTIVE)
  startDate             DateTime   @default(now())
  endDate               DateTime?  // Null for active subscriptions
  cancelledAt           DateTime?
  stripeCustomerId      String?    // For Stripe integration
  stripeSubscriptionId  String?    // For Stripe integration
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  
  // Relations
  user                  User       @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  plan                  Plan       @relation(fields: [planId], references: [id])
  
  @@index([userId])
  @@index([status])
}

model Category {
  id      String    @id @default(cuid())
  name    String @unique
  Product Product[]
}

model Order {
  id             String       @id @default(cuid())
  price          Float
  status         OrderStatus
  customerId     String
  storeHistoryId String
  customer           User         @relation(fields: [customerId], references: [id])
  StoreHistory   StoreHistory @relation(fields: [storeHistoryId], references: [id])
  OrderItem      OrderItem[]
  createdAt DateTime @default(now())
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  Order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id         String      @id @default(cuid())
  name       String @unique
  stock      Int
  quantity   Int
  price      Float
  minStock   Int
  createdAt  DateTime    @default(now())
  storeId    String
  categoryId String
  OrderItem  OrderItem[]
  Category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
}


model StoreHistory {
  id      String  @id @default(cuid())
  storeId String
  Order   Order[]
  Store   Store   @relation(fields: [storeId], references: [id])
}


enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  OWNER
  STAFF
  CUSTOMER
}
enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
enum PlanStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  PAST_DUE
}
enum PlanType {
  Explorer
  Starter
  Growth
  ENTERPRISE
}